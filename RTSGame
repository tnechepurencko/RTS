/// 3. Implement one supply center (‘C’ character) per bot which pops out one new unit of any type in the map
/// every 2 seconds

#include <iostream>
#include <tuple>
#include <thread>
#include <chrono>
#include <utility>
#include <vector>

using namespace std;
using namespace chrono_literals;

const int TIMEOUT = 400;

class Position {
public:
    std::tuple<int, int> pos;

    /**
     * Constructor
     * @param x : x-coordinate
     * @param y :y-coordinate
     */
    Position(int x, int y) {
        pos = make_tuple(x, y);
    }

    friend bool operator== (Position &position1, Position &position2) {
        return get<0>(position1.pos) == get<0>(position2.pos) && get<1>(position1.pos) == get<1>(position2.pos);
    }

    // ITEM 3.c: operator "="
    /**
     * An operator that assigns one position to another
     * @param position to assign
     * @return : position
     */
    Position operator= (Position &position) {
        auto *newPosition = new Position(get<0>(position.pos), get<1>(position.pos));
        return *newPosition;
    }
};

int numOfObj = 0;

class ObjectScheme {
public:
    // ITEM 3.e: pure virtual
    virtual int numOfObjects() = 0;

    // ITEM 3.e: virtual
    virtual void increaseNumOfObjects() {};
};

// ITEM 3.b: A class with a destructor and several constructors
class Object : public ObjectScheme{
public:
    Position *position{};
    string symbol;
    int player{};

    /**
     * A function that returns number of objects
     * @return : number of objects
     */
    int numOfObjects() override {
        return numOfObj;
    }

    /**
     * A function that increases number of objects
     */
    void increaseNumOfObjects() override {
        numOfObj++;
    }

    /**
     * Default constructor
     */
    Object() = default;

    /**
     * Copy constructor
     * @param object
     */
    Object(Object &object) {
        this->player = object.player;
        this->position = object.position;
        this->symbol = object.symbol;
        increaseNumOfObjects();
    }

    /**
     * Default destructor
     */
    ~Object() = default;

    /**
     * Constructor
     * @param player :
     * @param position
     * @param symbol
     */
    Object(int player, Position *position, string symbol) {
        this->player = player;
        this->position = position;
        this->symbol = move(symbol);
    }

    // ITEM 3.c: operator ">"
    /**
     * An operator that tells if object1 can kill object2: WORKS ONLY FOR SYMBOLS "R", "P" OR "S"
     * @param object1
     * @param object2
     * @return : can object1 kill object2
     */
    friend bool operator>(Object &object1, Object &object2) {
        if (object1.symbol == "r" || object1.symbol == "R") {
            if (object2.symbol == "p" || object1.symbol == "P") {
                return false;
            } else if (object2.symbol == "S" || object1.symbol == "s") {
                return true;
            }
        } else if (object2.symbol == "p" || object1.symbol == "P") {
            if (object2.symbol == "r" || object1.symbol == "R") {
                return true;
            } else if (object2.symbol == "S" || object1.symbol == "s") {
                return false;
            }
        } else if (object2.symbol == "S" || object1.symbol == "s"){
            if (object2.symbol == "r" || object1.symbol == "R") {
                return false;
            } else if (object2.symbol == "p" || object1.symbol == "P") {
                return true;
            }
        } else {
            cout << "error\n";
        }

        return NULL;
    }
};

class ObjectF : public Object {
public:
    /**
     * Constructor
     * @param player
     * @param position
     * @param symbol
     */
    ObjectF(int player, Position *position, string symbol) : Object(player, position, move(symbol)) {};
};

class Action {
public:
    Position *from;
    Position *to;

    /**
     * Constructor
     * @param from : current position
     * @param to : where to go
     */
    Action(Position *from, Position *to) {
        this->from = from;
        this->to = to;
    }

    // ITEM 3.c: operator "+"
    friend Action operator+(Action &action1, Action &action2) {
        auto *action = new Action(action1.from, action2.to);
        return *action;
    }
};

// ITEM 3.g: non-copiable class
class Facts {
public:
    // ITEM 3.k: one of STL containers in my code
    vector<string> facts;

    Facts() {
        facts = {
                "The first programmer in the world was a woman. Her name was Ada Lovelace and she worked on an analytical engine back in the 1,800\'s.",
                "Recent studies have shown that over 70% of coding jobs are in fields outside of technology.",
                "The first computer game was created in 1961.",
                "Nowadays, there are over 700 different programming languages.",
                "The word computer \"bug\" was inspired by a real bug.",
                "There is a thing called \"Constant Variable\". Funny.",
                "Ctrl C, Ctrl V, and Ctrl-Z have saved more lives than Batman. The amount of copied code is hundred times more than typing a code.",
                "Most of Developers will not get ideas while writing the code, they will get when they eating,bathing or driving etc.",
                "One of the world\'s most popular COVID-19 tracking websites was created by a teen.",
                "Python was a hobby project.",
                "The game of rock paper scissors originated from China."
        };
    }

    // to make the class non-copiable
    Facts(const Facts& f) = delete;
};

class World {
public:
    const int fieldSize = 15;

    vector<shared_ptr<Object>> player0;
    vector<string> doNotStep0 = {"r", "p", "s", "M", "f", "c"};

    vector<shared_ptr<Object>> player1;
    vector<string> doNotStep1 = {"R", "P", "S", "M", "F", "C"};

    vector<shared_ptr<Object>> mountains;
    string **field;

    /**
     * A function that creates shared pointers with mountains and fills the vector for mountains with them.
     * @param objects : vector for mountains
     */
    void spawnMountains(vector<shared_ptr<Object>> &objects) const {
        Position *position;
        Object *object;
        shared_ptr<Object> elem;

        position = new Position(2, 10);
        object = new Object(-1, position, "M");
        elem = shared_ptr<Object>(object);
        objects.push_back(elem);

        position = new Position(2, 12);
        object = new Object(-1, position, "M");
        elem = shared_ptr<Object>(object);
        objects.push_back(elem);

        position = new Position(4, 9);
        object = new Object(-1, position, "M");
        elem = shared_ptr<Object>(object);
        objects.push_back(elem);

        position = new Position(4, 13);
        object = new Object(-1, position, "M");
        elem = shared_ptr<Object>(object);
        objects.push_back(elem);

        for (int i = 10; i < 13; i++) {
            position = new Position(5, i);
            object = new Object(-1, position, "M");
            elem = shared_ptr<Object>(object);
            objects.push_back(elem);
        }

        for (int i = 6; i < 9; i++) {
            position = new Position(7, i);
            object = new Object(-1, position, "M");
            elem = shared_ptr<Object>(object);
            objects.push_back(elem);
        }

        for (int i = 10; i < 13; i++) {
            position = new Position(i, 2);
            object = new Object(-1, position, "M");
            elem = shared_ptr<Object>(object);
            objects.push_back(elem);

            position = new Position(i, 4);
            object = new Object(-1, position, "M");
            elem = shared_ptr<Object>(object);
            objects.push_back(elem);

            position = new Position(i, 6);
            object = new Object(-1, position, "M");
            elem = shared_ptr<Object>(object);
            objects.push_back(elem);
        }

        position = new Position(12, 5);
        object = new Object(-1, position, "M");
        elem = shared_ptr<Object>(object);
        objects.push_back(elem);
    }


    // ITEM 3.d: static typing
    // ITEM 3.k: the template function use to make it possible to change vector of any type objects
    /**
     * A function that creates shared pointers with objects and fills the vector for objects with them.
     * @param player : number of player
     * @param objects : vector for objects of type T
     */
    template<typename T>
    static void initialPack(int player, vector<T> &objects) {
        objects.clear();

        Position *position;
        Object *object;

        T elem;

        switch (player) {
            case 0:
                position = new Position(0, 0);
                // ITEM 3.d: we dynamic typing to get a flagObject as an Object
                object = new ObjectF(0, position, "f");
                elem = T(object);
                objects.push_back(elem);

                position = new Position(7, 5);
                object = new Object(0, position, "c");
                elem = T(object);
                objects.push_back(elem);

                for (int i = 1; i < 6; i++) {
                    position = new Position(0, i);
                    object = new Object(0, position, "r");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(1, i);
                    object = new Object(0, position, "p");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(2, i);
                    object = new Object(0, position, "s");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(3, i);
                    object = new Object(0, position, "r");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(4, i);
                    object = new Object(0, position, "p");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(5, i);
                    object = new Object(0, position, "s");
                    elem = T(object);
                    objects.push_back(elem);
                }

                break;

            case 1:
                position = new Position(14, 14);
                object = new ObjectF(1, position, "F");
                elem = T(object);
                objects.push_back(elem);

                position = new Position(7, 9);
                object = new Object(0, position, "C");
                elem = T(object);
                objects.push_back(elem);

                for (int i = 9; i < 14; i++) {
                    position = new Position(9, i);
                    object = new Object(1, position, "R");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(10, i);
                    object = new Object(1, position, "P");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(11, i);
                    object = new Object(1, position, "S");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(12, i);
                    object = new Object(1, position, "R");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(13, i);
                    object = new Object(1, position, "P");
                    elem = T(object);
                    objects.push_back(elem);

                    position = new Position(14, i);
                    object = new Object(1, position, "S");
                    elem = T(object);
                    objects.push_back(elem);
                }

                break;

            default:
                cout << "error\n";
        }
    }

    /**
     * Constructor
     */
    World() {
        this->field = new string *[this->fieldSize];
        for (int i = 0; i < this->fieldSize; i++) {
            this->field[i] = new string[this->fieldSize];

            for (int j = 0; j < this->fieldSize; j++) {
                field[i][j] = " ";
            }
        }

        // 3.f: a call to a constant member function
        this->spawnMountains(mountains);

        World::initialPack(0, player0);
        World::initialPack(1, player1);
    }

    /**
     * A function that compares object's position and another one position
     * @param object
     * @param position
     * @return : if object's position == position
     */
    bool comparePos(Object &object, Position &position){
        if (*object.position == position) {
            return true;
        }
        return false;
    }

    // ITEM 3.j: filtering a STL container using a predicate function
    /**
     * A function that gets the index (in the vector of player's objects) of the object according to its coordinates
     * @param player
     * @param x : x-coordinate
     * @param y : y-coordinate
     * @return : the index
     */
    int getIndex(int player, Position &position) {
        if (player == 0) {
            for (int i = 0; i < this->player0.size(); i++) {
                if (comparePos(*this->player0[i], position)) {
                    return i;
                }
            }
        } else if (player == 1) {
            for (int i = 0; i < this->player1.size(); i++) {
                if (comparePos(*this->player1[i], position)) {
                    return i;
                }
            }
        }

        return -1;
    }


    /**
     * A function that checks if someones shares the same coordinates
     * @return : vector of coordinates (v[2k + 0]: x-coord, v[2k + 1]: y-coord)
     */
    vector<int> readyToFight() {
        vector<int> arguedCoords;

        for (auto & i : this->player0) {
            for (auto & j : this->player1) {
                if (*i->position == *j->position) {
                    arguedCoords.push_back(get<0>(i->position->pos));
                    arguedCoords.push_back(get<1>(i->position->pos));
                }
            }
        }

        return arguedCoords;
    }


    /**
     * A function that checks 2 objects that are share the same place and determines the winner
     * @param ind0 : index of the player0's object (in the vector of player0's objects)
     * @param ind1 : index of the player1's object (in the vector of player1's objects)
     * @return : index of the winner
     */
    int winScheme(int ind0, int ind1) {
        // ITEM 3.i: we use decltype to declare "s" with the type of the object's symbol
        decltype(this->player1[ind1]->symbol) s = this->player1[ind1]->symbol;

        if (this->player0[ind0]->symbol == "r") {
            if (s == "P") {
                return ind1;
            } else if (s == "S" || s == "F" || s == "C") {
                return ind0;
            } else if (s == "R") {
                return -1;
            } else {
                cout << "error\n";
            }
        } else if (this->player0[ind0]->symbol == "p") {
            if (s == "P") {
                return -1;
            } else if (s == "S") {
                return ind1;
            } else if (s == "R" || s == "F" || s == "C") {
                return ind0;
            } else {
                cout << "error\n";
            }
        } else if (this->player0[ind0]->symbol == "s") {
            if (s == "P" || s == "F" || s == "C") {
                return ind0;
            } else if (s == "S") {
                return -1;
            } else if (s == "R") {
                return ind1;
            } else {
                cout << "error\n";
            }
        } else if (this->player0[ind0]->symbol == "f" || this->player0[ind0]->symbol == "c") {
            if (s == "R" || s == "P" || s == "S") {
                return ind1;
            } else {
                cout << "error\n";
            }
        }

        return -2;
    }

    /**
     * A function that returns the index of player0's SC
     * @return : the index
     */
    int SC0Index() {
        for (int i = 0; i < this->player0.size(); i++) {
            if (player0[i]->symbol == "c") {
                return i;
            }
        }
        return -1;
    }
/**
     * A function that returns the index of player1's SC
     * @return : the index
     */
    int SC1Index() {
        for (int i = 0; i < this->player1.size(); i++) {
            if (player1[i]->symbol == "C") {
                return i;
            }
        }
        return -1;
    }

    /**
     * A function that finds shared coordinates and makes the objects on such places fight
     * @param action : action to get the object's previous position if it meets an opponent's object of the same type
     */
    void fight(Action &action0, Action &action1) {
        vector<int> arguedCoords = this->readyToFight();
        Position *position;

        int ind0, ind1, indWin;

        for (int i = 0; i < arguedCoords.size(); i += 2) {
            position = new Position(arguedCoords[i], arguedCoords[i + 1]);
            ind0 = getIndex(0, *position);
            ind1 = getIndex(1, *position);
            indWin = winScheme(ind0, ind1);

            if (indWin == ind0) {
                if (this->player1[ind1]->symbol == "C") {
                    int counter = 0, ind;
                    while (counter < 5) {
                        ind = rand() % player1.size();
                        if (ind != ind1) {
                            player1.erase(player1.begin() + ind);
                            counter++;
                        }
                    }
                }

                player1.erase(player1.begin() + ind1);
            } else if (indWin == ind1) {
                if (this->player0[ind0]->symbol == "c") {
                    int counter = 0, ind;
                    while (counter < 5) {
                        ind = rand() % player0.size();
                        if (ind != ind1) {
                            player0.erase(player0.begin() + ind);
                            counter++;
                        }
                    }
                }

                player0.erase(player0.begin() + ind0);
            } else if (indWin == -1) {
                if (*this->player0[ind0]->position == *action0.to) {
                    this->player0[ind0]->position = action0.from;
                }

                if (*this->player1[ind1]->position == *action1.to) {
                    this->player1[ind1]->position = action1.from;
                }
            } else {
                cout << "error\n";
            }
        }
    }

    /**
     * A function that rebuilds the field with changed (or nor) coordinates of the objects
     */
    void rebuildField() {
        for (int i = 0; i < this->fieldSize; i++) {
            for (int j = 0; j < this->fieldSize; j++) {
                this->field[i][j] = " ";
            }
        }

        for (auto & mountain : this->mountains) {
            this->field[get<0>(mountain->position->pos)][get<1>(mountain->position->pos)] = mountain->symbol;
        }

        for (auto & i : this->player0) {
            this->field[get<0>(i->position->pos)][get<1>(i->position->pos)] = i->symbol;
        }

        for (auto & i : this->player1) {
            this->field[get<0>(i->position->pos)][get<1>(i->position->pos)] = i->symbol;
        }
    }

    /**
     * A function that checks if someone is on the position taken by its teammate or is on the mountain's position
     * @return
     */
    int illegalMovesCheck() {
        int x0, y0, x1, y1;

        for (int i = 0; i < this->player0.size(); i++) {
            for (int j = 0; j < this->player0.size(); j++) {
                if (i != j && *this->player0[i]->position == *this->player0[j]->position) {
                    return 0;
                }
            }

            x0 = get<0>(player0[i]->position->pos);
            y0 = get<1>(player0[i]->position->pos);
            if ((x0 == 2 && (y0 == 10 || y0 == 12)) || (x0 == 4 && (y0 == 9 || y0 == 13)) ||
                (x0 == 7 && y0 > 5 && y0 < 9) || (x0 == 5 && y0 > 9 && y0 < 13) ||
                (x0 > 9 && x0 < 13 && (y0 == 2 || y0 == 4 || y0 == 6)) || (x0 == 12 && y0 == 5)) {
                return 0;
            }

        }

        for (int i = 0; i < this->player1.size(); i++) {
            for (int j = 0; j < this->player1.size(); j++) {
                if (i != j && *this->player1[i]->position == *this->player1[j]->position) {
                    return 1;
                }
            }

            x1 = get<0>(player1[i]->position->pos);
            y1 = get<1>(player1[i]->position->pos);
            if ((x1 == 2 && (y1 == 10 || y1 == 12)) || (x1 == 4 && (y1 == 9 || y1 == 13)) ||
                (x1 == 7 && y1 > 5 && y1 < 9) || (x1 == 5 && y1 > 9 && y1 < 13) ||
                (x1 > 9 && x1 < 13 && (y1 == 2 || y1 == 4 || y1 == 6)) || (x1 == 12 && y1 == 5)) {
                return 1;
            }
        }

        return -1;
    }

    /**
     * A function that prints the field
     */
    void print() {
        cout << "player0:\nnumber of objects: " << this->player0.size() << ": ";
        for (auto & i : this->player0) {
            cout << i->symbol << ":" << get<0>(i->position->pos) << "-" << get<1>(i->position->pos) << " ";
        }

        cout << "\nplayer1:\nnumber of objects: " << this->player1.size() << ": ";
        for (auto & i : this->player1) {
            cout << i->symbol << ":" << get<0>(i->position->pos) << "-" << get<1>(i->position->pos) << " ";
        }

        cout << "\nfield:\n+  ";
        for (int i = 0; i < this->fieldSize; i++) {
            if (i < 10) {
                cout << i << "  ";
            } else {
                cout << i << " ";
            }
        }
        cout << endl;

        for (int i = 0; i < this->fieldSize; i++) {
            if (i < 10) {
                cout << i << "  ";
            } else {
                cout << i << " ";
            }

            for (int j = 0; j < this->fieldSize; j++) {
                cout << this->field[i][j] << "  ";
            }
            cout << endl;
        }

        cout << "\n";
    }
};

/**
 * A function that chooses a random available direction to move for the player0's object
 * @param object
 * @param world
 * @return : the direction
 */
string whereToMove(Object &object, World &world) {
    if (object.symbol == "f" || object.symbol == "F") {
        return "nowhere";
    }

    vector<string> dirs = {"r", "l", "u", "d"};

    int dir;
    bool flag;

    for (int i = 4; i > 0; i--) {
        flag = true; // means that such direction cannot be used
        dir = rand() % i;

        if (dirs[dir] == "r") {
            if (get<1>(object.position->pos) != 14) {
                if (object.player == 0) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos)][get<1>(object.position->pos) + 1] == world.doNotStep0[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else if (object.player == 1) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos)][get<1>(object.position->pos) + 1] == world.doNotStep1[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else {
                    cout << "error\n";
                }

                if (flag) {
                    return dirs[dir];
                } else {
                    dirs.erase(dirs.begin() + dir);
                }
            }
        } else if (dirs[dir] == "l") {
            if (get<1>(object.position->pos) != 0) {
                if (object.player == 0) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos)][get<1>(object.position->pos) - 1] == world.doNotStep0[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else if (object.player == 1) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos)][get<1>(object.position->pos) - 1] == world.doNotStep1[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else {
                    cout << "error\n";
                }

                if (flag) {
                    return dirs[dir];
                } else {
                    dirs.erase(dirs.begin() + dir);
                }
            }
        } else if (dirs[dir] == "u") {
            if (get<0>(object.position->pos) != 14) {
                if (object.player == 0) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos) + 1][get<1>(object.position->pos)] == world.doNotStep0[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else if (object.player == 1) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos) + 1][get<1>(object.position->pos)] == world.doNotStep1[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else {
                    cout << "error\n";
                }

                if (flag) {
                    return dirs[dir];
                } else {
                    dirs.erase(dirs.begin() + dir);
                }
            }
        } else if (dirs[dir] == "d") {
            if (get<0>(object.position->pos) != 0) {
                if (object.player == 0) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos) - 1][get<1>(object.position->pos)] == world.doNotStep0[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else if (object.player == 1) {
                    for (int j = 0; j < 6; j++) {
                        if (world.field[get<0>(object.position->pos) - 1][get<1>(object.position->pos)] == world.doNotStep1[j]) {
                            flag = false;
                            break;
                        }
                    }
                } else {
                    cout << "error\n";
                }

                if (flag) {
                    return dirs[dir];
                } else {
                    dirs.erase(dirs.begin() + dir);
                }
            }
        } else {
            cout << "error\n";
        }
    }

    return "nowhere";
}

/**
 * A function that chooses a random player0's object, finds a random direction for it and makes an action for its move
 * @param world
 * @return : the action
 */
Action actionPlayerZero(World &world) {
    Action *action = nullptr;
    Position *newPosition = nullptr;

    if (!world.player0.empty()) {
        int instigator = rand() % world.player0.size();
        Object object = *world.player0[instigator];
        string dir = whereToMove(object, world);

        while (dir == "nowhere") {
            instigator = rand() % world.player0.size();
            object = *world.player0[instigator];
            dir = whereToMove(object, world);
        }

        if (dir == "r") {
            newPosition = new Position(get<0>(object.position->pos), get<1>(object.position->pos) + 1);
        } else if (dir == "l") {
            newPosition = new Position(get<0>(object.position->pos), get<1>(object.position->pos) - 1);
        } else if (dir == "u") {
            newPosition = new Position(get<0>(object.position->pos) + 1, get<1>(object.position->pos));
        } else if (dir == "d") {
            newPosition = new Position(get<0>(object.position->pos) - 1, get<1>(object.position->pos));
        } else {
            cout << "error\n";
        }

        action = new Action(world.player0[instigator]->position, newPosition);

    } else {
        cout << "player0 is dead\n";
    }

    return *action;
}

/**
 * A function that finds a direction for the player1's object to make it go to The Great Route
 * p.s. it is easy to find The Great Route while watching the player1's steps in the output
 * @param object
 * @param world
 * @return : the direction
 */
string moveToTheGreatRoute(Object &object, World &world) {
    if (get<0>(object.position->pos) < 14) {
        return "d";
    }

    return "l";
}

/**
 * A function that chooses a player1's object, finds a direction to move it and makes an action for its move
 * @param world
 * @return : the action
 */
Action actionPlayerOne(World &world) {
    Action *action = nullptr;
    Position *newPosition = nullptr;

    Position *position;

    if (!world.player1.empty()) {
        string dir;

        int ind1 = -1, ind2 = -1;
        bool noMoreSoldiers = false;

        bool bre = false; // break for the first loop
        for (int j = 9; j < 14; j++) {
            for (int i = 14; i > 8; i--) {
                position = new Position(i, j);
                if (world.getIndex(1, *position) != -1) {
                    ind1 = i;
                    ind2 = j;
                    bre = true;
                    break;
                }
            }
            if (bre) {
                break;
            }
        }

        if (ind1 == -1) {
            noMoreSoldiers = true;
        }

        if (!noMoreSoldiers && world.field[14][8] != "S" && world.field[14][8] != "P" && world.field[14][8] != "R") {
            // move to The Great Route
            Object object = *world.player1[world.getIndex(1, *position)];

            dir = moveToTheGreatRoute(object, world);

            if (dir == "l") {
                newPosition = new Position(ind1, ind2 - 1);
            } else if (dir == "d") {
                newPosition = new Position(ind1 + 1, ind2);
            } else {
                cout << "error\n";
            }

            action = new Action(object.position, newPosition);
        } else {
            ind1 = -1;
            ind2 = -1;
            // move along The Great Route
            for (int i = 7; i > -1; i--) {
                if (noMoreSoldiers) {
                    if (!(world.field[14][i] != "S" && world.field[14][i] != "P" && world.field[14][i] != "R")) {
                        noMoreSoldiers = false;
                    }
                }

                if (!noMoreSoldiers && world.field[14][i] != "S" && world.field[14][i] != "P" && world.field[14][i] != "R") {
                    ind1 = 14;
                    ind2 = i + 1;
                    break;
                }
            }

            if (ind1 != 14) {
                for (int i = 13; i > -1; i--) {
                    if (noMoreSoldiers) {
                        if (!(world.field[i][0] != "S" && world.field[i][0] != "P" && world.field[i][0] != "R")) {
                            noMoreSoldiers = false;
                        }
                    }

                    if (!noMoreSoldiers && world.field[i][0] != "S" && world.field[i][0] != "P" && world.field[i][0] != "R") {
                        ind1 = i + 1;
                        ind2 = 0;
                        break;
                    }
                }
            }

            if (ind1 == 14 && ind2 > 0) {
                newPosition = new Position(ind1, ind2 - 1);
            } else if (ind2 == 0) {
                newPosition = new Position(ind1 - 1, ind2);
            }

            position = new Position(ind1, ind2);
            Object object = *world.player1[world.getIndex(1, *position)];

            action = new Action(object.position, newPosition);
        }


    } else {
        cout << "player1 is dead\n";
    }

    return *action;
}

/**
 * A function that causes SC to generate units
 * @param player : number of player
 */
void SCWork(int player, World &world) {
    switch (player) {
        case 0:
            if (world.player0.size() < 40) {
                int ind = world.SC0Index();
                Position *position;

                if (ind != -1) {
                    int x, y;
                    x = get<0>(world.player0[ind]->position->pos);
                    y = get<1>(world.player0[ind]->position->pos);

                    if (world.field[x][y + 1] == " ") {
                        position = new Position(x, y + 1);
                    } else if (world.field[x][y - 1] == " ") {
                        position = new Position(x, y - 1);
                    } else if (world.field[x + 1][y] == " ") {
                        position = new Position(x + 1, y);
                    } else if (world.field[x - 1][y] == " ") {
                        position = new Position(x - 1, y);
                    } else {
                        break;
                    }

                    string s;
                    int sym = rand() % 3;
                    switch (sym) {
                        case 0:
                            s = "r";
                            break;
                        case 1:
                            s = "p";
                            break;
                        case 2:
                            s = "s";
                            break;
                        default:
                            cout << "error\n";
                    }

                    auto *object = new Object(0, position, s);
                    shared_ptr<Object> elem = shared_ptr<Object>(object);
                    world.player0.push_back(elem);
                }
            }

            break;

        case 1:
            if (world.player1.size() < 40) {
                int ind = world.SC1Index();
                Position *position;

                if (ind != -1) {
                    int x, y;
                    x = get<0>(world.player1[ind]->position->pos);
                    y = get<1>(world.player1[ind]->position->pos);

                    if (world.field[x][y + 1] == " ") {
                        position = new Position(x, y + 1);
                    } else if (world.field[x][y - 1] == " ") {
                        position = new Position(x, y - 1);
                    } else if (world.field[x + 1][y] == " ") {
                        position = new Position(x + 1, y);
                    } else if (world.field[x - 1][y] == " ") {
                        position = new Position(x - 1, y);
                    } else {
                        break;
                    }

                    string s;
                    int sym = rand() % 3;
                    switch (sym) {
                        case 0:
                            s = "R";
                            break;
                        case 1:
                            s = "P";
                            break;
                        case 2:
                            s = "S";
                            break;
                        default:
                            cout << "error\n";
                    }

                    auto *object = new Object(1, position, s);
                    shared_ptr<Object> elem = shared_ptr<Object>(object);
                    world.player1.push_back(elem);
                }
            }

            break;

        default:
            cout << "error\n";
    }
}

/**
 * A function that makes the object change its position following the action we chose for that
 * @param player : who's object is going to move
 * @param action : the action we choose
 * @param world
 */
void doAction(int player, Action &action, World &world) {


    if (player == 0) {
        for (int i = 1; i < world.player0.size() + 1; i++) {
            if (*world.player0[i]->position == *action.from) {
                world.player0[i]->position = action.to;
                break;
            }
        }
    } else if (player == 1) {
        for (int i = 1; i < world.player1.size() + 1; i++) {
            if (*world.player1[i]->position == *action.from) {
                world.player1[i]->position = action.to;
                break;
            }
        }
    } else {
        cout << "error\n";
    }
}

/**
 * The return is a pair: action and a boolean whether a timeout happened
 */
std::tuple<Action, bool> waitPlayer(Action (*f)(World &w), World &world) {
    auto start = std::chrono::high_resolution_clock::now();

    Action action = f(world);

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsed = end - start;

    std::cout << "Waited " << elapsed.count() << " ms\n";

    if (elapsed.count() > TIMEOUT) // if time > 0.3 s
        return {action, true}; // player failed to answer in less than 400 ms
    else return {action, false};
}

int main() {
    srand(time(nullptr));

    auto *world = new World();
    world->rebuildField();
    world->print();

    auto *facts = new Facts();

    bool endGame = false;
    while (!endGame) {
        cout << "Interesting fact: " << facts->facts[rand() % facts->facts.size()] << " That's incredible!\n\n";

        auto[action0, timeout0] = waitPlayer(actionPlayerZero, *world);
        auto[action1, timeout1] = waitPlayer(actionPlayerOne, *world);

        if (timeout0 || timeout1) {
            endGame = true;
            if (timeout0 && timeout1) {
                cout << "IT'S A DRAW!!! good game:)\n";
            } else if (timeout0) {
                cout << "PLAYER 1 WON!!! be faster, player 0:)\n";
            } else {
                cout << "PLAYER 0 WON!!! be faster, player 1:)\n";
            }
        } else {
            doAction(0, action0, *world);
            doAction(1, action1, *world);

            SCWork(0, *world);
            SCWork(1, *world);

            world->fight(action0, action1);
            world->rebuildField();
            world->print();

            if (world->illegalMovesCheck() == 0) {
                cout << "PLAYER 1 WON!!! you can't outsmart the algorithm, player 0:)\n";
                endGame = true;
            } else if (world->illegalMovesCheck() == 1) {
                cout << "PLAYER 0 WON!!! you can't outsmart the algorithm, player 1:)\n";
                endGame = true;
            }

            if (world->player0[0]->symbol != "f" || world->player1[0]->symbol != "F") {
                if (world->player0[0]->symbol != "f") {
                    cout << "PLAYER 1 WON!!! next time, player 0:)\n";
                } else {
                    cout << "PLAYER 0 WON!!! next time, player 1:)\n";
                }
                endGame = true;
            }
        }
    }

    return 0;
};
